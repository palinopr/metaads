// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                      String          @id @default(cuid())
  name                    String
  slug                    String          @unique
  subscriptionTier        SubscriptionTier @default(FREE)
  monthlyAdSpendLimit     Decimal         @default(300.00) @db.Decimal(12, 2)
  currentMonthSpend       Decimal         @default(0.00) @db.Decimal(12, 2)
  commissionPercentage    Decimal         @default(10.00) @db.Decimal(5, 2)
  isActive                Boolean         @default(true)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt

  users                   UserOrganization[]
  metaAccounts           MetaAccount[]
  campaignPermissions    CampaignPermission[]
  campaignMetrics        CampaignMetric[]
  aiSuggestions          AISuggestion[]
  billingRecords         BillingRecord[]
  auditLogs              AuditLog[]
  apiKeys                APIKey[]
  webhookSubscriptions   WebhookSubscription[]

  @@index([slug])
  @@index([isActive, subscriptionTier])
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  passwordHash      String
  firstName         String?
  lastName          String?
  isEmailVerified   Boolean         @default(false)
  isActive          Boolean         @default(true)
  lastLoginAt       DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  organizations     UserOrganization[]
  campaignPermissions CampaignPermission[]
  grantedPermissions CampaignPermission[] @relation("GrantedBy")
  appliedSuggestions AISuggestion[]
  auditLogs         AuditLog[]
  createdApiKeys    APIKey[]
  sessions          Session[]

  @@index([email])
  @@index([isActive])
}

model UserOrganization {
  userId          String
  organizationId  String
  role            UserRole        @default(VIEWER)
  joinedAt        DateTime        @default(now())

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
  @@index([organizationId, role])
}

model MetaAccount {
  id               String          @id @default(cuid())
  organizationId   String
  accountId        String          // Facebook Ad Account ID (act_xxx)
  accountName      String?
  accessToken      String          @db.Text // Encrypted
  tokenExpiresAt   DateTime?
  isActive         Boolean         @default(true)
  lastSyncedAt     DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  organization     Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  campaignPermissions CampaignPermission[]
  campaignMetrics  CampaignMetric[]
  webhookSubscriptions WebhookSubscription[]

  @@unique([organizationId, accountId])
  @@index([organizationId, isActive])
}

model CampaignPermission {
  id               String          @id @default(cuid())
  userId           String
  organizationId   String
  metaAccountId    String
  campaignId       String          // Facebook Campaign ID
  permissionLevel  PermissionLevel @default(VIEW)
  grantedBy        String
  grantedAt        DateTime        @default(now())

  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization     Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  metaAccount      MetaAccount     @relation(fields: [metaAccountId], references: [id], onDelete: Cascade)
  grantor          User            @relation("GrantedBy", fields: [grantedBy], references: [id])

  @@unique([userId, campaignId])
  @@index([userId, organizationId])
  @@index([campaignId])
}

model CampaignMetric {
  id               String          @id @default(cuid())
  organizationId   String
  metaAccountId    String
  campaignId       String          // Facebook Campaign ID
  campaignName     String?
  date             DateTime        @db.Date
  impressions      BigInt          @default(0)
  clicks           BigInt          @default(0)
  spend            Decimal         @default(0.00) @db.Decimal(12, 2)
  conversions      Int             @default(0)
  ctr              Decimal         @default(0.0000) @db.Decimal(8, 4)
  cpc              Decimal         @default(0.0000) @db.Decimal(10, 4)
  cpm              Decimal         @default(0.0000) @db.Decimal(10, 4)
  roas             Decimal         @default(0.0000) @db.Decimal(10, 4)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  organization     Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  metaAccount      MetaAccount     @relation(fields: [metaAccountId], references: [id], onDelete: Cascade)

  @@unique([campaignId, date])
  @@index([organizationId, date])
  @@index([campaignId, date])
}

model AISuggestion {
  id                      String          @id @default(cuid())
  organizationId          String
  campaignId              String          // Facebook Campaign ID
  suggestionType          SuggestionType
  suggestionText          String          @db.Text
  expectedImpactPercentage Decimal?       @db.Decimal(5, 2)
  confidenceScore         Decimal?        @db.Decimal(3, 2)
  status                  SuggestionStatus @default(PENDING)
  createdAt               DateTime        @default(now())
  appliedAt               DateTime?
  appliedBy               String?

  organization            Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  applier                 User?           @relation(fields: [appliedBy], references: [id])

  @@index([organizationId, status])
  @@index([campaignId, status])
}

model BillingRecord {
  id                  String          @id @default(cuid())
  organizationId      String
  billingPeriodStart  DateTime        @db.Date
  billingPeriodEnd    DateTime        @db.Date
  totalAdSpend        Decimal         @db.Decimal(12, 2)
  commissionAmount    Decimal         @db.Decimal(12, 2)
  status              BillingStatus   @default(PENDING)
  stripeInvoiceId     String?
  paidAt              DateTime?
  createdAt           DateTime        @default(now())

  organization        Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, billingPeriodStart])
  @@index([status])
  @@index([organizationId, status])
}

model AuditLog {
  id              String          @id @default(cuid())
  organizationId  String
  userId          String
  action          String
  entityType      String
  entityId        String
  oldValues       Json?
  newValues       Json?
  ipAddress       String?
  userAgent       String?         @db.Text
  createdAt       DateTime        @default(now())

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([organizationId, createdAt])
  @@index([userId, createdAt])
  @@index([entityType, entityId])
}

model APIKey {
  id              String          @id @default(cuid())
  organizationId  String
  name            String
  keyHash         String          @unique
  permissions     Json            @default("[\"read\"]")
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  isActive        Boolean         @default(true)
  createdBy       String
  createdAt       DateTime        @default(now())

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  creator         User            @relation(fields: [createdBy], references: [id])

  @@index([organizationId, isActive])
}

model WebhookSubscription {
  id              String          @id @default(cuid())
  organizationId  String
  metaAccountId   String
  webhookUrl      String
  events          Json            @default("[\"campaign.created\", \"campaign.updated\", \"campaign.deleted\"]")
  secretKey       String
  isActive        Boolean         @default(true)
  lastTriggeredAt DateTime?
  createdAt       DateTime        @default(now())

  organization    Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  metaAccount     MetaAccount     @relation(fields: [metaAccountId], references: [id], onDelete: Cascade)

  @@index([organizationId, isActive])
}

model Session {
  id          String          @id @default(cuid())
  userId      String
  tokenHash   String          @unique
  ipAddress   String?
  userAgent   String?         @db.Text
  expiresAt   DateTime
  createdAt   DateTime        @default(now())

  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expiresAt])
  @@index([expiresAt])
}

// Enums
enum SubscriptionTier {
  FREE
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum UserRole {
  OWNER
  ADMIN
  MANAGER
  VIEWER
}

enum PermissionLevel {
  VIEW
  EDIT
  MANAGE
}

enum SuggestionType {
  BUDGET
  TARGETING
  CREATIVE
  SCHEDULE
  BID_STRATEGY
}

enum SuggestionStatus {
  PENDING
  APPLIED
  DISMISSED
  EXPIRED
}

enum BillingStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}